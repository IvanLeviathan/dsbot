{"version":3,"sources":["components/Spinner/index.jsx","context/main.js","components/Button/index.jsx","components/Auth/index.jsx","components/Footer/index.jsx","components/Input/index.jsx","components/Select/index.jsx","components/Textarea/index.jsx","components/NoPermissions/index.jsx","components/SettingsForm/index.jsx","store/alerts/index.js","_config.js","store/guilds/index.js","store/firebase/index.js","components/NoServers/index.jsx","container/SettingsContainer.js","components/Settings/index.jsx","components/ServerSettings/index.jsx","container/ServSettingsContainer.js","components/Home/index.jsx","components/UserDetail/index.jsx","components/UsersList/index.jsx","container/UsersContainer.js","components/pages/Users/index.jsx","components/Stats/index.jsx","container/StatsContainer.js","components/pages/Stats/index.jsx","utils/logs.js","components/Pagination/index.jsx","container/LogsContainer.js","components/Logs/index.jsx","components/pages/Logs/index.jsx","components/UserData/index.jsx","utils/data.js","components/UserData/container.js","components/pages/UserData/index.jsx","pages/index.jsx","store/auth/index.js","components/Alerts/index.jsx","components/Alerts/container.js","static/images/burger.svg","static/images/close.svg","components/Sidebar/index.jsx","components/Sidebar/container.js","store/user/index.js","components/Header/index.jsx","components/Header/container.js","App.js","store/index.js","index.js"],"names":["Spinner","props","card","className","role","Context","createContext","Button","onClick","e","text","classes","disabled","type","Auth","app","useContext","curYear","Date","getFullYear","src","alt","width","height","window","location","href","DS_AUTH_URL","target","rel","Footer","Input","value","onChange","placeholder","required","id","Select","options","map","option","Textarea","resizeTextArea","style","scrollHeight","onLoad","onInput","NoPermissions","curGuild","name","SettingsForm","isAdmin","onSubmit","saveSettingsForm","htmlFor","botName","setBotName","botPic","setBotPic","botChannelId","setBotChannelId","channels","botChannelLegionsId","setBotChannelLegionsId","botFooter","setBotFooter","botLegion","setBotLegion","color","botColor","onChangeComplete","setBotColor","botIp","setBotIp","botPort","setBotPort","battleMetricsUrl","setBattleMetricUrl","greetingsChannel","setGreetingsChannel","greetingsText","setGreetingsText","greetingsImage","setGreetingsImage","initState","actionType","actionAddAlert","payload","alertsReducer","state","action","filter","alert","alertId","require","config","links","url","exact","REDIRECT_URI","process","COOKIE_ACCESS","COOKIE_REFRESH","BOT_API_URL","storageName","fetch","CUR_GUILD","GUILDS","CUR_GUILD_USERS","CUR_USER_PORTFOLIO","actionSetUserGuilds","allServers","actionSetGuildUsers","actionSetUserPortfolio","guildsReducer","guild","curServer","curServerStorageId","localStorage","getItem","find","setItem","SETTINGS","STAT","CHANNELS","ALL_SERVERS","header","Headers","append","actionGetServerSettings","authToken","serverId","dispatch","a","params","URLSearchParams","toString","method","headers","then","res","json","error","getTime","actionSetServerSettings","actionSetServerStat","catch","console","log","actionGetServerStat","actionGetGuildChannels","actionSetGuildChannels","actionSetAllServersWhereBotIs","firebaseReducer","formattedChannels","obj","push","NoServers","SettingsContainer","useDispatch","useSelector","shallowEqual","firebase","context","useState","botTitle","setBotNameState","botThumb","setBotPicState","setBotChannelIdState","botLegionsChannelId","setBotChannelLegionsIdState","setBotLegionState","setBotFooterState","setBotColorState","botLegionServerIP","setBotIpState","botLegionServerPort","setBotPortState","setBattleMetricUrlState","setIsAdmin","setGreetingsTextState","setGreetingsChannelState","setGreetingsImageState","getGuildChannels","useEffect","length","Object","keys","replace","hex","found","match","channelsToOptions","channelId","channel","makeOptionsFromChannels","preventDefault","newSettings","formData","JSON","stringify","Settings","ServerSettings","settings","stat","searchInputChange","searchInputValue","findChannel","title","backgroundColor","scope","item","index","ServSettingsContainer","searchValue","setSearchValue","getServerStat","filterStat","useMemo","stats","now","todayStats","statDate","curStat","statDateObj","getDate","getMonth","forEach","statObj","Set","toLowerCase","includes","Home","UserDetail","curUser","username","avatar","nickname","discriminator","edit","textChange","image","imageChange","portfolio","buttonText","UsersList","changeSearchValue","users","user","to","UsercContainer","useRouteMatch","userId","setImage","setText","setButtonText","setEditState","setSearchValueText","getGuildUsers","stateUsers","getUserPortfolio","curPortfolio","actionGetUserPortfolio","getServerSettings","findCurUser","newPortfolio","actionUpdateUserPortfolio","filterGuildUsers","usersArr","UsersPage","Stats","ResponsiveContainer","AreaChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","stroke","fill","StatsContainer","pad","num","size","days","statsSorted","sort","b","key","datePretty","day","curDay","findCurStat","StatsPage","getServerLogs","Pagination","pages","curPage","onPageClick","pagesArr","i","page","interval","Logs","setPage","setPages","items","setItems","onPage","startIndex","Math","ceil","slice","createdAt","toLocaleDateString","toLocaleTimeString","LogsContainer","logs","setLogs","getLogs","logsRes","clearInterval","setInterval","LogsPage","UserData","userData","earnCreditsButtonClick","class","money","getUserDataFromServer","earnCreditsFromServer","UserDataContainer","userReducer","setUserData","getUserData","resData","earnCredits","success","UserDataPage","HomePage","path","component","cookies","Cookies","AUTH","AUTH_TOKEN","IS_LOADING","AUTH_ERROR","actionSetAuth","actionLogoutUser","remove","reload","authReducer","newState","tokenCookie","get","access_token","error_description","Alerts","alerts","AlertsContainer","lastAlert","setTimeout","Sidebar","guilds","guildListClick","openMenuClick","closeMenuClick","menuOpened","cutGuildName","nameArr","split","namePart","toUpperCase","join","burgerImage","closeImage","icon","link","activeClassName","SidebarContainer","useLocation","setMenuOpened","loadUserGuilds","actionGetUserGuilds","actionChangeCurrentGuild","actionSetUser","Header","logout","HeaderContainer","loadUser","status","actionGetUser","getAllServersWhereBotIs","actionGetAllServersWhereBotIs","App","authState","setAuthState","code","search","date","set","maxAge","setDate","refresh_token","Provider","middleware","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6fe433b.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function Spinner(props) {\r\n  return (\r\n    props.card ? (\r\n      <div className=\"card spinner-card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"spinner spinner-border text-primary\" role=\"status\">\r\n            <span className=\"sr-only\">Загрузка...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"spinner spinner-border text-primary\" role=\"status\">\r\n        <span className=\"sr-only\">Загрузка...</span>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n","import {createContext} from 'react';\r\n\r\nexport const Context = createContext();","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function Button({onClick=(e) => void 0, text='', classes = '', disabled=false, type=\"button\"}) {\r\n  return <button\r\n    onClick={onClick}\r\n    className={'btn btn-primary ' + classes}\r\n    disabled={disabled}\r\n    type={type}\r\n  >\r\n  {text}\r\n  </button>\r\n}\r\n","import React, { useContext } from 'react'\r\nimport './style.scss'\r\nimport { Context } from '../../context/main'\r\nimport Button from '../Button'\r\n\r\nexport default function Auth() {\r\n  const context = useContext(Context)\r\n  const app = context.app\r\n  const discordAuthSend = () => {\r\n    window.location.href = app.DS_AUTH_URL\r\n  }\r\n\r\n  const curYear = new Date().getFullYear()\r\n\r\n  return (\r\n    <div className=\"text-center auth-wrapper\">\r\n      <div className=\"form-signin\">\r\n        <img\r\n          className=\"mb-4\"\r\n          src=\"https://cdn.discordapp.com/app-icons/802686207493931078/2c26ed86bad5a81ae54a0b9b77cbdce0.png?size=256\"\r\n          alt=\"\"\r\n          width=\"256\"\r\n          height=\"256\"\r\n        />\r\n        <h1 className=\"h3 mb-3 font-weight-normal\">\r\n          Панель управления \"Hesh Junior\"\r\n        </h1>\r\n        <Button\r\n          text=\"Войти через Discord\"\r\n          onClick={discordAuthSend}\r\n          classes=\"btn-discord btn-block\"\r\n        />\r\n        <p className=\"mt-5 mb-3\">\r\n          © 2021 - {curYear}{' '}\r\n          <a\r\n            href=\"https://discord.gg/eMauW6ZmhJ\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            Hesh Junior\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './style.scss'\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"py-3\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 text-right\">\r\n            2021 - {new Date().getFullYear()}\r\n            &nbsp;\r\n            <a\r\n              href=\"https://discord.gg/eMauW6ZmhJ\"\r\n              className=\"text-light\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Hesh Junior\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Input({type=\"text\", value=\"\", onChange=(e) => void 0, classes=\"\", disabled=false, placeholder=\"\", required=false, id=''}) {\r\n  return (\r\n    <input\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n      className={'form-control ' + classes}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      id={id}\r\n      disabled={disabled}\r\n    />\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nexport default function Select({value='', options=[], classes='', id='', required=false, onChange=(e) => void 0}) {\r\n  return (\r\n    <select\r\n      value={value}\r\n      onChange={onChange}\r\n      className={'form-control ' + classes}\r\n      required={required}\r\n      id={id}\r\n    >\r\n      {\r\n        options.map((option) => <option key={option.value} value={option.value}>{option.text}</option>)\r\n      }\r\n    </select>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function Textarea({value=\"\", onChange=(e) => void 0, classes=\"\", disabled=false, placeholder=\"\", required=false, id=''}) {\r\n  const resizeTextArea = (e) => {\r\n    e.target.style.height = \"auto\";\r\n    e.target.style.height = (e.target.scrollHeight + 5) + \"px\";\r\n  }\r\n  \r\n  return (\r\n    <textarea\r\n      value={value}\r\n      onChange={(e) => {\r\n        onChange(e)\r\n        resizeTextArea(e)\r\n      }}\r\n      onLoad={resizeTextArea}\r\n      onInput={resizeTextArea}\r\n      className={'form-control ' + classes}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      id={id}\r\n      disabled={disabled}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NoPermissions({curGuild={}}) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h2>Недостаточно прав для изменения</h2>\r\n        Только пользователи с правами администратора на сервере <b>{curGuild.name}</b> имеют право на изменение.\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Input from '../Input'\r\nimport Select from '../Select'\r\nimport Textarea from '../Textarea'\r\nimport { ChromePicker } from 'react-color'\r\nimport './style.css'\r\nimport Button from '../Button'\r\nimport NoPermissions from '../NoPermissions'\r\n\r\nexport default function SettingsForm(props) {\r\n  // console.log(props.curGuild.permissions);\r\n  // console.log(props.adminPermissions);\r\n  if (!props.isAdmin) {\r\n    return <NoPermissions curGuild={props.curGuild} />\r\n  } else {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <form className=\"settings-form\" onSubmit={props.saveSettingsForm}>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-name\">Имя бота</label>\r\n                  <Input\r\n                    value={props.botName}\r\n                    onChange={props.setBotName}\r\n                    required={true}\r\n                    placeholder=\"Имя бота\"\r\n                    id=\"bot-name\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-pic\">Изображение</label>\r\n                  <Input\r\n                    value={props.botPic}\r\n                    onChange={props.setBotPic}\r\n                    required={true}\r\n                    placeholder=\"Изображение\"\r\n                    id=\"bot-pic\"\r\n                  />\r\n                  <img\r\n                    className=\"bot-img my-3\"\r\n                    src={props.botPic}\r\n                    alt={props.botName}\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Вставляем ссылку, так как хранить изображения негде.\r\n                  </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-channel\">Канал для рапортов</label>\r\n                  <Input\r\n                    value={props.botChannelId}\r\n                    onChange={props.setBotChannelId}\r\n                    required={true}\r\n                    classes=\"mb-2\"\r\n                    placeholder=\"Канал для рапортов\"\r\n                    id=\"bot-channel\"\r\n                  />\r\n                  <Select\r\n                    value={props.botChannelId}\r\n                    onChange={props.setBotChannelId}\r\n                    id=\"bot-channel\"\r\n                    options={props.channels}\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Каналы могут обновляться с задержкой. Если нужных каналов\r\n                    нет, используйте обычное поле, которое принимает в себя ID\r\n                    канала.\r\n                  </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-legions-channel\">Канал для общения</label>\r\n                  <Input\r\n                    value={props.botChannelLegionsId}\r\n                    onChange={props.setBotChannelLegionsId}\r\n                    required={true}\r\n                    classes=\"mb-2\"\r\n                    placeholder=\"Канал для общения\"\r\n                    id=\"bot-legions-channel\"\r\n                  />\r\n                  <Select\r\n                    value={props.botChannelLegionsId}\r\n                    onChange={props.setBotChannelLegionsId}\r\n                    id=\"bot-legions-channel\"\r\n                    options={props.channels}\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Каналы могут обновляться с задержкой. Если нужных каналов\r\n                    нет, используйте обычное поле, которое принимает в себя ID\r\n                    канала.\r\n                  </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-footer\">Подпись</label>\r\n                  <Input\r\n                    value={props.botFooter}\r\n                    onChange={props.setBotFooter}\r\n                    required={true}\r\n                    placeholder=\"Подпись\"\r\n                    id=\"bot-footer\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-legion\">Список подразделений</label>\r\n                  <Input\r\n                    value={props.botLegion}\r\n                    onChange={props.setBotLegion}\r\n                    required={true}\r\n                    placeholder=\"Список подразделений\"\r\n                    id=\"bot-legion\"\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Через <b>,</b> и без пробелов, пример - <b>212,41,501</b>.{' '}\r\n                    <b>none</b> - для отслеживания ВСЕХ на сервере.\r\n                  </small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-color\">Цвет</label>\r\n                  <ChromePicker\r\n                    color={props.botColor}\r\n                    onChangeComplete={props.setBotColor}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-ip\">IP</label>\r\n                  <Input\r\n                    value={props.botIp}\r\n                    onChange={props.setBotIp}\r\n                    required={true}\r\n                    placeholder=\"IP\"\r\n                    id=\"bot-ip\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-port\">Порт</label>\r\n                  <Input\r\n                    value={props.botPort}\r\n                    onChange={props.setBotPort}\r\n                    required={true}\r\n                    placeholder=\"Порт\"\r\n                    id=\"bot-port\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"battlemetric\">\r\n                    Ссылка на battlemetrics.com\r\n                  </label>\r\n                  <Input\r\n                    value={props.battleMetricsUrl}\r\n                    onChange={props.setBattleMetricUrl}\r\n                    required={false}\r\n                    placeholder=\"battlemetrics.com\"\r\n                    id=\"battlemetric\"\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Заполняется ТОЛЬКО в том случае, когда бот неспособен\r\n                    \"достучаться\" до сервера своими средствами.\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-12\">\r\n                <div className=\"form-group mt-4\">\r\n                  <h3>Приветствие пользователей</h3>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"bot-greetings-channel\">\r\n                    Канал для приветствия\r\n                  </label>\r\n                  <Input\r\n                    value={props.greetingsChannel}\r\n                    onChange={props.setGreetingsChannel}\r\n                    required={false}\r\n                    classes=\"mb-2\"\r\n                    placeholder=\"Канал для приветствия\"\r\n                    id=\"bot-greetings-channel\"\r\n                  />\r\n                  <Select\r\n                    value={props.greetingsChannel}\r\n                    onChange={props.setGreetingsChannel}\r\n                    id=\"bot-greetings-channel\"\r\n                    options={props.channels}\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Каналы могут обновляться с задержкой. Если нужных каналов\r\n                    нет, используйте обычное поле, которое принимает в себя ID\r\n                    канала.\r\n                  </small>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"greetings-text\">Текст приветствия</label>\r\n                  <Textarea\r\n                    value={props.greetingsText}\r\n                    onChange={props.setGreetingsText}\r\n                    required={false}\r\n                    placeholder=\"Текст приветствия\"\r\n                    id=\"greetings-text\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"greetings-pic\">Изображение приветствия</label>\r\n                  <Input\r\n                    value={props.greetingsImage}\r\n                    onChange={props.setGreetingsImage}\r\n                    required={false}\r\n                    placeholder=\"Изображение\"\r\n                    id=\"greetings-pic\"\r\n                  />\r\n                  <img\r\n                    className=\"bot-img my-3\"\r\n                    src={props.greetingsImage}\r\n                    alt=\"Изображение при приветствии пользователя\"\r\n                  />\r\n                  <small className=\"form-text text-muted\">\r\n                    Вставляем ссылку, так как хранить изображения негде.\r\n                  </small>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-12\">\r\n                <div className=\"form-group\">\r\n                  <Button text=\"Сохранить\" classes=\"btn-block\" type=\"submit\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","\r\n\r\nconst initState = [];\r\n\r\nconst actionType = {\r\n  ADD_ALERT: 'ADD_ALERT',\r\n  REMOVE_ALERT: 'REMOVE_ALERT'\r\n}\r\n\r\n\r\nexport const actionAddAlert = (payload) => {\r\n  return {\r\n    type: actionType.ADD_ALERT,\r\n    payload\r\n  }\r\n}\r\n\r\n\r\nexport const actionRemoveAlert = (alertId) => {\r\n  return {\r\n    type: actionType.REMOVE_ALERT,\r\n    alertId\r\n  }\r\n}\r\n\r\n\r\nconst alertsReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case actionType.ADD_ALERT:\r\n      return [...state, action.payload];\r\n    case actionType.REMOVE_ALERT:\r\n      return state.filter((alert) => alert.id !== action.alertId);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default alertsReducer;","require('dotenv').config()\r\n\r\nconst dev = false\r\n\r\nconst urlPrefix = dev ? '' : ''\r\n\r\nconst links = [\r\n  {\r\n    name: 'Главная',\r\n    url: '/',\r\n  },\r\n  {\r\n    name: 'Настройки',\r\n    url: '/settings',\r\n  },\r\n  {\r\n    name: 'Список',\r\n    url: '/users',\r\n    exact: false,\r\n  },\r\n  {\r\n    name: 'Статистика',\r\n    url: '/stats',\r\n  },\r\n  {\r\n    name: 'Логи',\r\n    url: '/logs',\r\n  },\r\n  {\r\n    name: 'Сводка',\r\n    url: '/userdata',\r\n  },\r\n]\r\n\r\nconst app = {\r\n  // REDIRECT_URI: dev ? 'http://localhost:3000' : 'http://ivanleviathan.github.io/bot-panel/#/',\r\n  REDIRECT_URI: dev\r\n    ? 'http://localhost:3000'\r\n    : 'https://heshjunior.herokuapp.com/',\r\n  DS_AUTH_URL: dev\r\n    ? process.env.REACT_APP_DS_AUTH_DEV_URL\r\n    : process.env.REACT_APP_DS_AUTH_URL2,\r\n  COOKIE_ACCESS: 'ds-auth-access',\r\n  COOKIE_REFRESH: 'ds-auth-refresh',\r\n  BOT_API_URL: dev\r\n    ? process.env.REACT_APP_API_URL_DEV\r\n    : process.env.REACT_APP_API_URL,\r\n}\r\n\r\nexport { app, links, urlPrefix }\r\n","import { app } from '../../_config';\r\nimport { actionAddAlert } from '../alerts';\r\nconst storageName = 'cur-server';\r\nconst fetch = require('node-fetch')\r\n\r\nconst initState = {\r\n  CUR_GUILD: false,\r\n  GUILDS: false,\r\n  CUR_GUILD_USERS: false,\r\n  CUR_USER_PORTFOLIO: false\r\n};\r\n\r\n\r\n\r\nconst actionType = {\r\n  SET_USER_GUILDS: 'SET_USER_GUILDS',\r\n  CHANGE_CURRENT_GUILD: 'CHANGE_CURRENT_GUILD',\r\n  SET_GUILD_USERS: 'SET_GUILD_USERS',\r\n  SET_USER_PORTFOLIO: 'SET_USER_PORTFOLIO'\r\n}\r\n\r\nexport const actionGetUserGuilds = (authToken, allServers = {}) => (dispatch) => {\r\n\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('action', 'GET_USER_GUILDS');\r\n  const header = new Headers();\r\n  header.append('Content-Type', 'application/json');\r\n\r\n \r\n  fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(!!res.error){\r\n      dispatch(actionAddAlert({\r\n        type: 'danger',\r\n        text: `Ошибка получения гильдий: ${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n    }else{\r\n      dispatch(actionSetUserGuilds(res, allServers));\r\n    }\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n  })\r\n}\r\n\r\nconst actionSetUserGuilds = (payload, allServers) => {\r\n  return {\r\n    type: actionType.SET_USER_GUILDS,\r\n    payload,\r\n    allServers\r\n  }\r\n}\r\n\r\nexport const actionChangeCurrentGuild = (id) => {\r\n  return {\r\n    type: actionType.CHANGE_CURRENT_GUILD,\r\n    id\r\n  }\r\n}\r\n\r\n\r\nexport const actionGetGuildUsers = (authToken, serverId, stateUsers) => (dispatch) => {\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('server_id', serverId);\r\n  params.append('action', 'GET_GUILD_USERS');\r\n  const header = new Headers();\r\n  header.append('Content-Type', 'application/json');\r\n\r\n \r\n  fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(!!res.error){\r\n      dispatch(actionAddAlert({\r\n        type: 'danger',\r\n        text: `Ошибка получения пользователей гильдии: ${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n    }else{\r\n      if(JSON.stringify(stateUsers) !== JSON.stringify(res))\r\n        dispatch(actionSetGuildUsers(res));\r\n    }\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n  })\r\n}\r\n\r\nexport const actionSetGuildUsers = (payload) => {\r\n  return {\r\n    type: actionType.SET_GUILD_USERS,\r\n    payload\r\n  }\r\n}\r\n\r\n\r\nexport const actionGetUserPortfolio = (authToken, serverId, userId, curPortfolio) => (dispatch) => {\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('server_id', serverId);\r\n  params.append('user_id', userId);\r\n  params.append('action', 'GET_USER_PORTFOLIO');\r\n  const header = new Headers();\r\n  header.append('Content-Type', 'application/json');\r\n\r\n \r\n  fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(!!res.error){\r\n      dispatch(actionAddAlert({\r\n        type: 'danger',\r\n        text: `Ошибка получения портфолио пользователя: ${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n    }else{\r\n      res.userId = userId;\r\n      if(JSON.stringify(res) !== JSON.stringify(curPortfolio))\r\n        dispatch(actionSetUserPortfolio(res));\r\n    }\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n  })\r\n}\r\n\r\nexport const actionSetUserPortfolio = (payload) => {\r\n  return {\r\n    type: actionType.SET_USER_PORTFOLIO,\r\n    payload\r\n  }\r\n}\r\n\r\n\r\nexport const actionUpdateUserPortfolio = (authToken, serverId, userId, newPortfolio) => (dispatch) => {\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('server_id', serverId);\r\n  params.append('user_id', userId);\r\n  params.append('new_portfolio', JSON.stringify(newPortfolio));\r\n  params.append('action', 'UPDATE_USER_PORTFOLIO');\r\n  const header = new Headers();\r\n  header.append('Content-Type', 'application/json');\r\n\r\n \r\n  fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(!!res.error){\r\n      dispatch(actionAddAlert({\r\n        type: 'danger',\r\n        text: `Ошибка обновления портфолио пользователя: ${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n    }else{\r\n      dispatch(actionAddAlert({\r\n        type: 'success',\r\n        text: `${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n      newPortfolio.userId = userId;\r\n      dispatch(actionSetUserPortfolio(newPortfolio));\r\n    }\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n  })\r\n}\r\n\r\nconst guildsReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case actionType.SET_USER_GUILDS:\r\n      action.payload = action.payload.filter((guild) => !!action.allServers[guild.id]);\r\n      // action.payload = action.payload.filter((guild) => guild.id === '123');\r\n\r\n      let curServer = action.payload[0] ? action.payload[0] : {};\r\n\r\n      let curServerStorageId = localStorage.getItem(storageName);\r\n      if(curServerStorageId && action.payload.find((guild) => guild.id === curServerStorageId))\r\n        curServer = action.payload.find((guild) => guild.id === curServerStorageId);\r\n\r\n      return {...state, GUILDS: action.payload, CUR_GUILD: curServer}\r\n    case actionType.CHANGE_CURRENT_GUILD:\r\n      localStorage.setItem(storageName, action.id);\r\n      return {...state, CUR_GUILD: state.GUILDS.find((guild) => guild.id === action.id)};\r\n    case actionType.SET_GUILD_USERS:\r\n      return {...state, CUR_GUILD_USERS: action.payload}\r\n    case actionType.SET_USER_PORTFOLIO:\r\n      return {...state, CUR_USER_PORTFOLIO: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default guildsReducer;","import { actionAddAlert } from '../alerts'\r\nimport { app } from '../../_config'\r\nimport { actionSetGuildUsers } from '../guilds'\r\n\r\nconst initState = {\r\n  SETTINGS: false,\r\n  STAT: false,\r\n  CHANNELS: [],\r\n  ALL_SERVERS: {},\r\n}\r\n\r\nconst actionType = {\r\n  SET_SERVER_SETTINGS: 'SET_SERVER_SETTINGS',\r\n  SET_SERVER_STAT: 'SET_SERVER_STAT',\r\n  SET_SERVER_CHANNELS: 'SET_SERVER_CHANNELS',\r\n  SET_ALL_SERVERS: 'SET_ALL_SERVERS',\r\n}\r\n\r\nconst header = new Headers()\r\nheader.append('Content-Type', 'application/json')\r\n\r\nexport const actionGetServerSettings =\r\n  (authToken, serverId) => async (dispatch) => {\r\n    const params = new URLSearchParams()\r\n    params.append('auth_token', authToken)\r\n    params.append('action', 'GET_SERVER_SETTINGS')\r\n    params.append('server_id', serverId)\r\n\r\n    fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n      method: 'GET',\r\n      headers: header,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!!res.error) {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'danger',\r\n              text: `Ошибка получения настроек сервера: ${res.text}`,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n        } else {\r\n          res.serverId = serverId\r\n          dispatch(actionSetServerSettings(res))\r\n          dispatch(actionSetGuildUsers(false))\r\n          dispatch(actionSetServerStat(false))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\nexport const actionSetServerSettings = (payload) => {\r\n  return {\r\n    type: actionType.SET_SERVER_SETTINGS,\r\n    payload,\r\n  }\r\n}\r\n\r\nexport const actionGetServerStat =\r\n  (authToken, serverId) => async (dispatch) => {\r\n    const params = new URLSearchParams()\r\n    params.append('auth_token', authToken)\r\n    params.append('action', 'GET_SERVER_STATS')\r\n    params.append('server_id', serverId)\r\n\r\n    fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n      method: 'GET',\r\n      headers: header,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!!res.error) {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'danger',\r\n              text: `Ошибка получения статистики сервера: ${res.text}`,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n        } else {\r\n          dispatch(actionSetServerStat(res))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\nexport const actionSetServerStat = (payload) => {\r\n  return {\r\n    type: actionType.SET_SERVER_STAT,\r\n    payload,\r\n  }\r\n}\r\n\r\nexport const actionGetGuildChannels =\r\n  (authToken, serverId) => async (dispatch) => {\r\n    const params = new URLSearchParams()\r\n    params.append('auth_token', authToken)\r\n    params.append('action', 'GET_GUILD_CHANNELS')\r\n    params.append('server_id', serverId)\r\n\r\n    fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n      method: 'GET',\r\n      headers: header,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!!res.error) {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'danger',\r\n              text: `Ошибка получения каналов сервера: ${res.text}`,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n        } else {\r\n          dispatch(actionSetGuildChannels(res))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\nconst actionSetGuildChannels = (payload) => {\r\n  return {\r\n    type: actionType.SET_SERVER_CHANNELS,\r\n    payload,\r\n  }\r\n}\r\n\r\nexport const actionUpdateGuildSettings =\r\n  (authToken, serverId, newSettings) => async (dispatch) => {\r\n    const params = new URLSearchParams()\r\n    params.append('auth_token', authToken)\r\n    params.append('action', 'UPDATE_GUILD_SETTINGS')\r\n    params.append('server_id', serverId)\r\n    params.append('new_settings', JSON.stringify(newSettings))\r\n\r\n    fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n      method: 'GET',\r\n      headers: header,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!!res.error) {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'danger',\r\n              text: `Ошибка обновления настроек сервера: ${res.text}`,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n        } else {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'success',\r\n              text: res.text,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n          newSettings.serverId = serverId\r\n          dispatch(actionSetServerSettings(newSettings))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\nexport const actionGetAllServersWhereBotIs =\r\n  (authToken) => async (dispatch) => {\r\n    const params = new URLSearchParams()\r\n    params.append('auth_token', authToken)\r\n    params.append('action', 'GET_ALL_SERVER_WHERE_BOT_IS')\r\n\r\n    fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n      method: 'GET',\r\n      headers: header,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!!res.error) {\r\n          dispatch(\r\n            actionAddAlert({\r\n              type: 'danger',\r\n              text: `Ошибка получения серверов с ботом: ${res.text}`,\r\n              id: new Date().getTime(),\r\n            }),\r\n          )\r\n        } else {\r\n          dispatch(actionSetAllServersWhereBotIs(res))\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\nconst actionSetAllServersWhereBotIs = (payload) => {\r\n  return {\r\n    type: actionType.SET_ALL_SERVERS,\r\n    payload,\r\n  }\r\n}\r\n\r\nconst firebaseReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case actionType.SET_SERVER_SETTINGS:\r\n      return { ...state, SETTINGS: action.payload }\r\n    case actionType.SET_SERVER_STAT:\r\n      return { ...state, STAT: action.payload }\r\n    case actionType.SET_SERVER_CHANNELS:\r\n      let formattedChannels = []\r\n      for (let id in action.payload) {\r\n        let obj = action.payload[id]\r\n        formattedChannels.push({ name: obj.name, id: id, type: obj.type })\r\n      }\r\n      return { ...state, CHANNELS: formattedChannels }\r\n    case actionType.SET_ALL_SERVERS:\r\n      return { ...state, ALL_SERVERS: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default firebaseReducer\r\n","import React from 'react'\r\n\r\nexport default function NoServers() {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h2>Подходящие сервера не найдены</h2>\r\n        Видимо у вас нет серверов где присутствует данный бот\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\r\nimport SettingsForm from '../components/SettingsForm'\r\nimport Spinner from '../components/Spinner'\r\nimport {\r\n  actionGetGuildChannels,\r\n  actionGetServerSettings,\r\n  actionSetServerSettings,\r\n  actionUpdateGuildSettings,\r\n} from '../store/firebase'\r\nimport { Context } from '../context/main'\r\nimport NoServers from '../components/NoServers'\r\n\r\nexport default function SettingsContainer() {\r\n  const dispatch = useDispatch()\r\n  const guild = useSelector((state) => state.guildsReducer, shallowEqual)\r\n  const firebase = useSelector((state) => state.firebaseReducer)\r\n  const context = useContext(Context)\r\n\r\n  const [botTitle, setBotNameState] = useState('')\r\n  const [botThumb, setBotPicState] = useState('')\r\n  const [botChannelId, setBotChannelIdState] = useState('')\r\n  const [botLegionsChannelId, setBotChannelLegionsIdState] = useState('')\r\n  const [botLegion, setBotLegionState] = useState('')\r\n  const [botFooter, setBotFooterState] = useState('')\r\n  const [botColor, setBotColorState] = useState('')\r\n  const [botLegionServerIP, setBotIpState] = useState('')\r\n  const [botLegionServerPort, setBotPortState] = useState('')\r\n  const [battleMetricsUrl, setBattleMetricUrlState] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [greetingsText, setGreetingsTextState] = useState('')\r\n  const [greetingsChannel, setGreetingsChannelState] = useState('')\r\n  const [greetingsImage, setGreetingsImageState] = useState('')\r\n\r\n  const getServerSettings = () => {\r\n    dispatch(actionGetServerSettings(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n\r\n  const dropServerSettings = () => {\r\n    dispatch(actionSetServerSettings(false))\r\n  }\r\n\r\n  const getGuildChannels = () => {\r\n    dispatch(actionGetGuildChannels(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!guild.CUR_GUILD.id) return\r\n\r\n    if (!firebase.SETTINGS) {\r\n      return getServerSettings()\r\n    }\r\n\r\n    if (!firebase.CHANNELS.length) {\r\n      return getGuildChannels()\r\n    }\r\n\r\n    if (guild.CUR_GUILD.id !== firebase.SETTINGS.serverId) {\r\n      dropServerSettings()\r\n      getGuildChannels()\r\n      return\r\n    }\r\n  }, [guild, firebase])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(firebase.SETTINGS).length) {\r\n      setBotNameState(firebase.SETTINGS.botTitle)\r\n      setBotPicState(firebase.SETTINGS.botThumb)\r\n      setBotChannelIdState(firebase.SETTINGS.botChannelId)\r\n      setBotChannelLegionsIdState(firebase.SETTINGS.botLegionsChannelId)\r\n      setBotLegionState(firebase.SETTINGS.botLegion)\r\n      setBotFooterState(firebase.SETTINGS.botFooter)\r\n      setBotColorState(firebase.SETTINGS.botColor)\r\n      setBotIpState(firebase.SETTINGS.botLegionServerIP)\r\n      setBotPortState(firebase.SETTINGS.botLegionServerPort)\r\n      setBattleMetricUrlState(firebase.SETTINGS.battleMetricsUrl)\r\n      setIsAdmin(firebase.SETTINGS.isAdmin)\r\n      setGreetingsTextState(firebase.SETTINGS.greetingsText)\r\n      setGreetingsChannelState(firebase.SETTINGS.greetingsChannel)\r\n      setGreetingsImageState(firebase.SETTINGS.greetingsImage)\r\n    } else {\r\n      setBotNameState('')\r\n      setBotPicState('')\r\n      setBotChannelIdState('')\r\n      setBotChannelLegionsIdState('')\r\n      setBotLegionState('')\r\n      setBotFooterState('')\r\n      setBotColorState('')\r\n      setBotIpState('')\r\n      setBotPortState('')\r\n      setBattleMetricUrlState('')\r\n      setIsAdmin(false)\r\n      setGreetingsTextState('')\r\n      setGreetingsChannelState('')\r\n      setGreetingsImageState('')\r\n    }\r\n  }, [firebase.SETTINGS])\r\n\r\n  const setBotName = (e) => {\r\n    if (e.target.value.length <= 32) setBotNameState(e.target.value)\r\n  }\r\n  const setBotPic = (e) => {\r\n    setBotPicState(e.target.value)\r\n  }\r\n  const setBotChannelId = (e) => {\r\n    setBotChannelIdState(e.target.value)\r\n  }\r\n\r\n  const setBotChannelLegionsId = (e) => {\r\n    setBotChannelLegionsIdState(e.target.value)\r\n  }\r\n  const setBotLegion = (e) => {\r\n    let value = e.target.value\r\n    value = value.replace(' ', '')\r\n    setBotLegionState(value)\r\n  }\r\n  const setBotFooter = (e) => {\r\n    setBotFooterState(e.target.value)\r\n  }\r\n  const setBotColor = (color) => {\r\n    setBotColorState(color.hex)\r\n  }\r\n  const setBotIp = (e) => {\r\n    setBotIpState(e.target.value)\r\n  }\r\n  const setBotPort = (e) => {\r\n    setBotPortState(e.target.value)\r\n  }\r\n\r\n  const setGreetingsText = (e) => {\r\n    setGreetingsTextState(e.target.value)\r\n  }\r\n  const setGreetingsChannel = (e) => {\r\n    setGreetingsChannelState(e.target.value)\r\n  }\r\n  const setGreetingsImage = (e) => {\r\n    setGreetingsImageState(e.target.value)\r\n  }\r\n\r\n  const setBattleMetricUrl = (e) => {\r\n    let value = e.target.value\r\n    var re = /https:\\/\\/www.battlemetrics.com\\/servers\\/arma3\\/(\\d+)/i\r\n\r\n    var found = value.match(re)\r\n    if (!found) {\r\n      setBattleMetricUrlState('')\r\n    } else {\r\n      setBattleMetricUrlState(value)\r\n    }\r\n  }\r\n\r\n  const makeOptionsFromChannels = (channels) => {\r\n    let channelsToOptions = []\r\n    for (let channelId in channels) {\r\n      let channel = channels[channelId]\r\n      if (channel.type === 'GUILD_TEXT') {\r\n        channelsToOptions.push({\r\n          text: channel.name,\r\n          value: channel.id,\r\n        })\r\n      }\r\n    }\r\n    return channelsToOptions\r\n  }\r\n\r\n  const saveSettingsForm = (e) => {\r\n    e.preventDefault()\r\n    const formData = {\r\n      botTitle,\r\n      botThumb,\r\n      botChannelId,\r\n      botLegionsChannelId,\r\n      botLegion,\r\n      botFooter,\r\n      botColor,\r\n      botLegionServerIP,\r\n      botLegionServerPort,\r\n      battleMetricsUrl,\r\n      isAdmin,\r\n      greetingsChannel,\r\n      greetingsImage,\r\n      greetingsText,\r\n    }\r\n    dispatch(\r\n      actionUpdateGuildSettings(\r\n        context.authToken,\r\n        guild.CUR_GUILD.id,\r\n        formData,\r\n      ),\r\n    )\r\n  }\r\n\r\n  if (guild.GUILDS.length === 0) return <NoServers />\r\n\r\n  return firebase.SETTINGS ? (\r\n    <SettingsForm\r\n      botName={botTitle}\r\n      setBotName={setBotName}\r\n      botPic={botThumb}\r\n      setBotPic={setBotPic}\r\n      botChannelId={botChannelId}\r\n      setBotChannelId={setBotChannelId}\r\n      botChannelLegionsId={botLegionsChannelId}\r\n      setBotChannelLegionsId={setBotChannelLegionsId}\r\n      botLegion={botLegion}\r\n      setBotLegion={setBotLegion}\r\n      botFooter={botFooter}\r\n      setBotFooter={setBotFooter}\r\n      botColor={botColor}\r\n      setBotColor={setBotColor}\r\n      botIp={botLegionServerIP}\r\n      setBotIp={setBotIp}\r\n      botPort={botLegionServerPort}\r\n      setBotPort={setBotPort}\r\n      battleMetricsUrl={battleMetricsUrl}\r\n      setBattleMetricUrl={setBattleMetricUrl}\r\n      channels={makeOptionsFromChannels(firebase.CHANNELS)}\r\n      saveSettingsForm={saveSettingsForm}\r\n      isAdmin={isAdmin}\r\n      setGreetingsChannel={setGreetingsChannel}\r\n      setGreetingsText={setGreetingsText}\r\n      setGreetingsImage={setGreetingsImage}\r\n      greetingsChannel={greetingsChannel}\r\n      greetingsText={greetingsText}\r\n      greetingsImage={greetingsImage}\r\n      curGuild={guild.CUR_GUILD}\r\n    />\r\n  ) : (\r\n    <Spinner card={true} />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport SettingsContainer from '../../container/SettingsContainer'\r\n\r\n\r\nexport default function Settings() {\r\n  return <SettingsContainer/>\r\n}\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Spinner from '../Spinner';\r\nimport \"./style.css\";\r\nimport Input from '../Input';\r\n\r\nexport default function ServerSettings({settings = {}, stat=false, channels = [], curGuild = {}, searchInputChange = (e) => void 0, searchInputValue = ''}) {\r\n  const findChannel= (channelId) => {\r\n    const channel = channels.find((channel) => channel.id === channelId);\r\n    if(channel)\r\n      return <span key={channel.id} className=\"channel-name\" title={channel.id}>{channel.name}</span>\r\n    return channelId;\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    {settings ? (\r\n      Object.keys(settings).length ? (\r\n        <div className=\"list-group\">\r\n          <div className=\"list-group-item flex-column align-items-start\">\r\n            <div className=\"d-flex w-100 justify-content-between\">\r\n              <h5 className=\"mb-0\">{curGuild.name}</h5>\r\n            </div>\r\n          </div>\r\n          <div className=\"list-group-item flex-column align-items-start bot-main-info pt-4\">\r\n            <div className=\"mb-1 row\">\r\n              <div className=\"col-md-6\">\r\n                <p className=\"font-weight-bold text-center h2 mb-4\">{settings.botTitle}</p>\r\n                <p className=\"text-center\"><img className=\"rounded-circle border\" src={settings.botThumb} alt={settings.botTitle} /></p>\r\n              </div>\r\n              <div className=\"col-md-6 bot-settings\">\r\n                <p><b>Канал для рапортов:</b>&nbsp;\r\n                  {findChannel(settings.botChannelId)}\r\n                </p>\r\n                <p><b>Канал для общения:</b>&nbsp;\r\n                  {findChannel(settings.botLegionsChannelId)}\r\n                </p>\r\n                <p><b>Подпись:</b> {settings.botFooter}</p>\r\n                <p><b>Подразделения:</b> {settings.botLegion}</p>\r\n                <p className=\"bot-color\"><b>Цвет:</b> <span style={{backgroundColor: settings.botColor}}></span></p>\r\n                <p><b>IP:</b> {settings.botLegionServerIP}:{settings.botLegionServerPort}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">Настроек бота не обнаружено</div>\r\n        </div>\r\n      )\r\n    ): (\r\n      <Spinner card={true}/>\r\n    )}\r\n\r\n    {stat ? (\r\n      <div className=\"list-group mt-4\">\r\n        <div className=\"list-group-item flex-column align-items-start\">\r\n          <div className=\"mb-4 w-100 justify-content-between\">\r\n            <div className=\"row\">\r\n              <div className=\"col-6\">\r\n                <h5 className=\"mb-3\">Были сегодня</h5>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <Input\r\n                  value={searchInputValue}\r\n                  onChange={searchInputChange}\r\n                  placeholder=\"Поиск\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-1 stat-table-wrapper\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">#</th>\r\n                  <th scope=\"col\">Имя</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  stat.map((item, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <th scope=\"row\">{index + 1}</th>\r\n                        <td>{item}</td>\r\n                      </tr>\r\n                    )\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <Spinner card={true}/>\r\n    )}\r\n\r\n\r\n  </div>\r\n  )\r\n}\r\n\r\nServerSettings.propTypes = {\r\n  stat: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.bool\r\n  ]),\r\n  channels: PropTypes.array,\r\n  curGuild: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.bool\r\n  ]),\r\n  searchInputChange: PropTypes.func,\r\n  searchInputValue: PropTypes.string\r\n}\r\n","import React, { useContext, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ServerSettings from '../components/ServerSettings'\r\nimport {\r\n  actionGetServerSettings,\r\n  actionGetServerStat,\r\n  actionSetServerSettings,\r\n  actionSetServerStat,\r\n} from '../store/firebase'\r\nimport { actionGetGuildChannels } from '../store/firebase'\r\nimport { Context } from '../context/main'\r\nimport NoServers from '../components/NoServers'\r\n\r\nexport default function ServSettingsContainer() {\r\n  const dispatch = useDispatch()\r\n  const guild = useSelector((state) => state.guildsReducer)\r\n  const firebase = useSelector((state) => state.firebaseReducer)\r\n  const context = useContext(Context)\r\n  const [searchValue, setSearchValue] = useState('')\r\n\r\n  const getServerSettings = () => {\r\n    dispatch(actionGetServerSettings(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n  const dropServerSettings = () => {\r\n    dispatch(actionSetServerSettings(false))\r\n  }\r\n  const getServerStat = () => {\r\n    dispatch(actionGetServerStat(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n  const getGuildChannels = () => {\r\n    dispatch(actionGetGuildChannels(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n  const dropServerStat = () => {\r\n    dispatch(actionSetServerStat(false))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!guild.CUR_GUILD.id) return\r\n\r\n    if (!firebase.SETTINGS) {\r\n      getServerSettings()\r\n      getServerStat()\r\n      return\r\n    }\r\n\r\n    if (firebase.SETTINGS && !firebase.STAT) {\r\n      getServerStat()\r\n      return\r\n    }\r\n\r\n    if (!firebase.CHANNELS.length) {\r\n      return getGuildChannels()\r\n    }\r\n\r\n    if (guild.CUR_GUILD.id !== firebase.SETTINGS.serverId) {\r\n      dropServerSettings()\r\n      dropServerStat()\r\n      getGuildChannels()\r\n      return\r\n    }\r\n  }, [guild, firebase])\r\n\r\n  const searchInputChange = (e) => {\r\n    setSearchValue(e.target.value)\r\n  }\r\n\r\n  const filterStat = useMemo(() => {\r\n    if (!firebase.STAT) return false\r\n    let stats = firebase.STAT\r\n    const now = new Date()\r\n    let todayStats = []\r\n\r\n    //filter for today\r\n    for (let statDate in stats) {\r\n      const curStat = stats[statDate]\r\n      const statDateObj = new Date(statDate)\r\n      if (\r\n        statDateObj.getDate() !== now.getDate() ||\r\n        statDateObj.getMonth() !== now.getMonth() ||\r\n        statDateObj.getFullYear() !== now.getFullYear()\r\n      ) {\r\n        continue\r\n      }\r\n      curStat.forEach((statObj) => todayStats.push(statObj.name))\r\n    }\r\n\r\n    todayStats = [...new Set(todayStats)]\r\n\r\n    if (searchValue.length)\r\n      return todayStats.filter((item) =>\r\n        item.toLowerCase().includes(searchValue.toLowerCase()),\r\n      )\r\n\r\n    return todayStats\r\n  }, [firebase.STAT, searchValue])\r\n\r\n  return guild.GUILDS.length !== 0 ? (\r\n    <ServerSettings\r\n      settings={firebase.SETTINGS}\r\n      stat={filterStat}\r\n      channels={firebase.CHANNELS}\r\n      curGuild={guild.CUR_GUILD}\r\n      searchInputChange={searchInputChange}\r\n      searchInputValue={searchValue}\r\n    />\r\n  ) : (\r\n    <NoServers />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ServSettingsContainer from '../../container/ServSettingsContainer'\r\n\r\nexport default function Home() {\r\n  return <ServSettingsContainer/>\r\n  \r\n}\r\n","import React from 'react'\r\nimport \"./style.css\";\r\nimport { app } from '../../_config';\r\nimport Button from \"../Button\";\r\nimport Input from '../Input';\r\nimport Textarea from '../Textarea';\r\n\r\nexport default function UserDetail(props) {\r\n  return (\r\n    !!props.curUser && props.curUser.username ? (\r\n      <div className=\"card user-detail\">\r\n        <div className=\"card-header\">\r\n          {props.curUser.avatar && (\r\n            <div className=\"detail-user-img\">\r\n              <img src={props.curUser.avatar} alt={props.curUser.username}/>\r\n            </div>\r\n          )}\r\n          <div className=\"detail-user-info\">\r\n            {props.curUser.nickname && (\r\n              <div className=\"detail-user-nickname\">{props.curUser.nickname}</div>\r\n            )}\r\n            <div className=\"detail-user-username\">\r\n              {props.curUser.username}#{props.curUser.discriminator}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {props.edit ? (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"bot-text\">Описание</label>\r\n                <Textarea\r\n                  value={props.text}\r\n                  onChange={props.textChange}\r\n                  placeholder=\"Описание\"\r\n                  id='bot-text'\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"bot-pic\">Изображение</label>\r\n                <Input\r\n                  value={props.image}\r\n                  onChange={props.imageChange}\r\n                  placeholder=\"Изображение\"\r\n                  id='bot-pic'\r\n                />\r\n                <img className=\"bot-img my-3\" src={props.image} alt={props.curUser.username}/>\r\n                <small className=\"form-text text-muted\">Вставляем ссылку, так как хранить изображения негде.</small>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <p className=\"card-text\">\r\n                {props.portfolio.text ? props.portfolio.text : 'Данные не найдены'}\r\n              </p>\r\n              {props.portfolio.image && (\r\n                <img src={props.portfolio.image} alt={props.curUser.username} />\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {\r\n             props.isAdmin && (\r\n              <Button\r\n                text={props.buttonText}\r\n                onClick={props.onClick}\r\n                classes=\"mt-3\"\r\n              />\r\n            )\r\n          }\r\n          {/* <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a> */}\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          Пользователь не найден\r\n        </div>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport \"./style.css\";\r\nimport { app } from '../../_config';\r\nimport Input from '../Input';\r\n\r\nexport default function UsersList(props) {\r\n  return (\r\n    <div className=\"list-group\">\r\n      <div className=\"list-group-item\">\r\n        <Input\r\n          value={props.searchValue}\r\n          onChange={props.changeSearchValue}\r\n          placeholder=\"Поиск...\"\r\n        />\r\n      </div>\r\n      { props.users.length ? (\r\n        props.users.map((user) => {\r\n          return (\r\n              <NavLink key={user.id} to={`/users/${user.id}`} className=\"list-group-item list-group-item-action\">\r\n                <p className=\"user-list-item m-0\">\r\n                  {user.avatar && (\r\n                    <span className=\"user-list-image mr-3\">\r\n                      <img src={user.avatar} alt={user.username} />\r\n                    </span>\r\n                  )}\r\n                  <span className=\"user-list-info\">\r\n                    {user.nickname && (\r\n                      <span className=\"user-list-nickname mb-1 d-block\">{user.nickname}</span>\r\n                    )}\r\n                    <span className=\"user-list-username mb-1 d-block\">{user.username}#{user.discriminator}</span>\r\n                  </span>\r\n                </p>\r\n              </NavLink>\r\n          )\r\n        })\r\n      ) : (\r\n        <div className=\"list-group-item\">Список пользователей пуст</div>\r\n      )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useRouteMatch } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport NoServers from '../components/NoServers';\r\nimport Spinner from '../components/Spinner';\r\nimport UserDetail from '../components/UserDetail';\r\nimport UsersList from '../components/UsersList';\r\nimport { Context } from '../context/main';\r\nimport { actionGetServerSettings } from '../store/firebase';\r\nimport { actionGetGuildUsers, actionGetUserPortfolio, actionSetGuildUsers, actionSetUserPortfolio, actionUpdateUserPortfolio } from '../store/guilds';\r\n\r\nexport default function UsercContainer() {\r\n  const guild = useSelector(state => state.guildsReducer);\r\n  const firebase = useSelector(state => state.firebaseReducer);\r\n  const context = useContext(Context);\r\n  const dispatch = useDispatch();\r\n  const match = useRouteMatch('/users/:id');\r\n  const userId = !!match && match.params.id ? match.params.id : 0;\r\n\r\n  const [image, setImage] = useState('');\r\n  const [text, setText] = useState('');\r\n\r\n  const [buttonText, setButtonText] = useState('Изменить');\r\n  const [edit, setEditState] = useState(false);\r\n\r\n  const [searchValue, setSearchValueText] = useState('');\r\n\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const getGuildUsers = () => {\r\n    dispatch(actionGetGuildUsers(context.authToken, guild.CUR_GUILD.id, guild.CUR_GUILD_USERS));\r\n  }\r\n\r\n  const getUserPortfolio = (curPortfolio) => {\r\n    dispatch(actionGetUserPortfolio(context.authToken, guild.CUR_GUILD.id, userId, curPortfolio));\r\n  }\r\n\r\n  const getServerSettings = () => {\r\n    dispatch(actionGetServerSettings(context.authToken, guild.CUR_GUILD.id));\r\n  }\r\n\r\n  const dropGuildUsers = () => {\r\n    dispatch(actionSetGuildUsers(false));\r\n  }\r\n\r\n  const dropUserPortfolio = () => {\r\n    dispatch(actionSetUserPortfolio(false));\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if(!guild.CUR_GUILD.id)\r\n      return;\r\n\r\n    if(!firebase.SETTINGS){\r\n      return getServerSettings();\r\n    }\r\n\r\n    if(!guild.CUR_GUILD_USERS){\r\n      return getGuildUsers();\r\n    }\r\n\r\n    if(guild.CUR_GUILD.id !== firebase.SETTINGS.serverId){\r\n      dropGuildUsers();\r\n      getServerSettings();\r\n      return;\r\n    }\r\n\r\n  }, [guild, firebase]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if(!guild.CUR_GUILD.id)\r\n      return;\r\n\r\n    if(!!userId && !guild.CUR_USER_PORTFOLIO){\r\n      setEditState(false);\r\n      setButtonText('Изменить');\r\n      getUserPortfolio(guild.CUR_USER_PORTFOLIO);\r\n      return;\r\n    }\r\n\r\n    if(!!userId && !!guild.CUR_USER_PORTFOLIO && userId !== guild.CUR_USER_PORTFOLIO.userId){\r\n      return dropUserPortfolio();\r\n    }\r\n  }, [userId, guild])\r\n\r\n\r\n  useEffect(() => {\r\n    if(guild.CUR_USER_PORTFOLIO){\r\n      setImage(guild.CUR_USER_PORTFOLIO.image);\r\n      setText(guild.CUR_USER_PORTFOLIO.text);\r\n      setIsAdmin(guild.CUR_USER_PORTFOLIO.isAdmin)\r\n    }\r\n  }, [guild.CUR_USER_PORTFOLIO])\r\n\r\n\r\n  const findCurUser = (users = [], id) => {\r\n    return users.filter(user => user.id === id)[0];\r\n  }\r\n\r\n  const onButtonClick = () => {\r\n    setButtonText(edit ? 'Изменить' : 'Сохранить');\r\n    if(edit){\r\n      const newPortfolio = {\r\n        text: text,\r\n        image: image,\r\n        isAdmin: isAdmin\r\n      }\r\n      dispatch(actionUpdateUserPortfolio(context.authToken, guild.CUR_GUILD.id, userId, newPortfolio));\r\n      setEditState(false)\r\n    }else{\r\n      setEditState(!edit);\r\n    }\r\n  }\r\n\r\n  const imageChange = (e) => {\r\n    setImage(e.target.value);\r\n  }\r\n  const textChange = (e) => {\r\n    setText(e.target.value);\r\n  }\r\n  const changeSearchValue = (e) => {\r\n    setSearchValueText(e.target.value);\r\n  }\r\n\r\n  const filterGuildUsers = (users) => {\r\n    let usersArr = [];\r\n    if(!!filterGuildUsers)\r\n      usersArr = users;\r\n\r\n    if(searchValue)\r\n      usersArr = usersArr.filter((user) => {\r\n        if(user.nickname)\r\n          return user.nickname.toLowerCase().includes(searchValue.toLowerCase()) || user.username.toLowerCase().includes(searchValue.toLowerCase());\r\n        else\r\n          return user.username.toLowerCase().includes(searchValue.toLowerCase());\r\n      })\r\n    return usersArr;\r\n  }\r\n\r\n  if(guild.GUILDS.length === 0)\r\n    return <NoServers/>;\r\n\r\n  return userId ? (\r\n      guild.CUR_USER_PORTFOLIO && guild.CUR_GUILD_USERS ? (\r\n        <UserDetail\r\n          portfolio={guild.CUR_USER_PORTFOLIO}\r\n          curUser={findCurUser(guild.CUR_GUILD_USERS, userId)}\r\n          curGuild={guild.CUR_GUILD}\r\n          buttonText={buttonText}\r\n          onClick={onButtonClick}\r\n          isAdmin={isAdmin}\r\n          edit={edit}\r\n          image={image}\r\n          imageChange={imageChange}\r\n          text={text}\r\n          textChange={textChange}\r\n        />\r\n      ) : (\r\n        <Spinner card={true}/>\r\n      )\r\n    ) : (\r\n      guild.CUR_GUILD_USERS ? (\r\n        <>\r\n        <UsersList\r\n          users={filterGuildUsers(guild.CUR_GUILD_USERS)}\r\n          curGuild={guild.CUR_GUILD}\r\n          searchValue={searchValue}\r\n          changeSearchValue={changeSearchValue}\r\n        />\r\n        </>\r\n      ) : (\r\n        <Spinner card={true}/>\r\n      )\r\n    )\r\n  \r\n}\r\n","import React from 'react'\r\nimport UsercContainer from '../../../container/UsersContainer'\r\n\r\nexport default function UsersPage() {\r\n  return <UsercContainer/>\r\n}\r\n","import React from 'react'\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts'\r\nimport './style.scss'\r\n\r\nexport default function Stats(props) {\r\n  return (\r\n    <div className=\"card chart-wrapper\">\r\n      <div className=\"card-body chart\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <AreaChart\r\n            width={500}\r\n            height={400}\r\n            data={props.data}\r\n            margin={{\r\n              top: 10,\r\n              right: 30,\r\n              left: 0,\r\n              bottom: 0,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey={props.dataKey}\r\n              stroke=\"#8884d8\"\r\n              fill=\"#8884d8\"\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  actionGetServerSettings,\r\n  actionGetServerStat,\r\n  actionSetServerStat,\r\n} from '../store/firebase'\r\nimport { Context } from '../context/main'\r\nimport NoServers from '../components/NoServers'\r\nimport Spinner from '../components/Spinner'\r\nimport Stats from '../components/Stats'\r\n\r\nexport default function StatsContainer() {\r\n  const guild = useSelector((state) => state.guildsReducer)\r\n  const firebase = useSelector((state) => state.firebaseReducer)\r\n  const dispatch = useDispatch()\r\n  const context = useContext(Context)\r\n\r\n  const getServerSettings = () => {\r\n    dispatch(\r\n      actionGetServerSettings(context.authToken, guild.CUR_GUILD.id, true),\r\n    )\r\n  }\r\n\r\n  const getServerStat = () => {\r\n    dispatch(actionGetServerStat(context.authToken, guild.CUR_GUILD.id))\r\n  }\r\n\r\n  const pad = (num, size) => {\r\n    num = num.toString()\r\n    while (num.length < size) num = '0' + num\r\n    return num\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!guild.CUR_GUILD.id) return\r\n\r\n    if (!firebase.SETTINGS) return getServerSettings()\r\n\r\n    if (!firebase.STAT) return getServerStat()\r\n\r\n    if (guild.CUR_GUILD.id !== firebase.SETTINGS.serverId) {\r\n      // dropServerStat();\r\n      getServerSettings()\r\n      return\r\n    }\r\n  }, [guild, firebase])\r\n\r\n  const randomRgba = (opacity = 1) => {\r\n    const r = Math.floor(Math.random() * 255) + 1\r\n    const g = Math.floor(Math.random() * 255) + 1\r\n    const b = Math.floor(Math.random() * 255) + 1\r\n    return [`rgba(${r}, ${g}, ${b}, ${opacity})`, `rgba(${r}, ${g}, ${b}, 1)`]\r\n  }\r\n\r\n  const dataKey = 'Количество игроков'\r\n\r\n  const findCurStat = (stats) => {\r\n    // {\r\n    //   name: '08.04.2022',\r\n    //   'Количество игроков': 2400,\r\n    // }\r\n\r\n    const data = []\r\n\r\n    let days = {}\r\n\r\n    const now = new Date()\r\n\r\n    let statsSorted = {}\r\n\r\n    Object.keys(stats)\r\n      .sort(function (a, b) {\r\n        const dateA = new Date(a)\r\n        const dateB = new Date(b)\r\n\r\n        return dateA > dateB\r\n      })\r\n      .forEach(function (key) {\r\n        statsSorted[key] = stats[key]\r\n      })\r\n\r\n    //filter for month\r\n    for (let statDate in statsSorted) {\r\n      const curStat = stats[statDate]\r\n      const statDateObj = new Date(statDate)\r\n      if (statDateObj.getMonth() !== now.getMonth()) {\r\n        continue\r\n      }\r\n\r\n      curStat.forEach((statObj) => {\r\n        const datePretty = `${pad(statDateObj.getDate(), 2)}.${pad(\r\n          statDateObj.getMonth() + 1,\r\n          2,\r\n        )}.${statDateObj.getFullYear()}`\r\n        if (!days[datePretty]) days[datePretty] = {}\r\n        days[datePretty][statObj.name] = true\r\n      })\r\n    }\r\n\r\n    for (let day in days) {\r\n      const curDay = days[day]\r\n      // data.labels.push(day)\r\n      const obj = {\r\n        name: day,\r\n        [dataKey]: Object.keys(curDay).length,\r\n      }\r\n      data.push(obj)\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  if (guild.GUILDS.length === 0) return <NoServers />\r\n\r\n  return firebase.STAT ? (\r\n    <Stats data={findCurStat(firebase.STAT)} dataKey={dataKey} />\r\n  ) : (\r\n    <Spinner card={true} />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport StatsContainer from '../../../container/StatsContainer'\r\n\r\nexport default function StatsPage() {\r\n  return <StatsContainer/>\r\n}\r\n","import { app } from \"../_config\";\r\n\r\nconst header = new Headers();\r\nheader.append('Content-Type', 'application/json');\r\n\r\nexport const getServerLogs = async (authToken, serverId) => {\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('action', 'GET_SERVER_LOGS');\r\n  params.append('server_id', serverId);\r\n\r\n  const res = await fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    return res.data\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n    return []\r\n  })\r\n  return res\r\n}","import React from 'react'\r\nimport './style.scss'\r\n\r\nexport default function Pagination({\r\n  pages = 10,\r\n  curPage = 1,\r\n  onPageClick = (e) => void 0,\r\n}) {\r\n  let pagesArr = []\r\n  for (var i = 1; i <= pages; i++) {\r\n    pagesArr.push(i)\r\n  }\r\n\r\n  return (\r\n    <ul className=\"pagination\">\r\n      {curPage !== 1 ? (\r\n        <li className=\"page-item\">\r\n          <span className=\"page-link\" onClick={() => onPageClick(curPage - 1)}>\r\n            &laquo;\r\n          </span>\r\n        </li>\r\n      ) : (\r\n        <li className=\"page-item disabled\">\r\n          <span className=\"page-link\">&laquo;</span>\r\n        </li>\r\n      )}\r\n\r\n      {pagesArr.map((page, i) => {\r\n        if (page === curPage)\r\n          return (\r\n            <li className=\"page-item active\" key={i}>\r\n              <span className=\"page-link\">{page}</span>\r\n            </li>\r\n          )\r\n        else\r\n          return (\r\n            <li className=\"page-item\" key={i}>\r\n              <span className=\"page-link\" onClick={() => onPageClick(page)}>\r\n                {page}\r\n              </span>\r\n            </li>\r\n          )\r\n      })}\r\n\r\n      {curPage !== pages ? (\r\n        <li className=\"page-item\">\r\n          <span className=\"page-link\" onClick={() => onPageClick(curPage + 1)}>\r\n            &raquo;\r\n          </span>\r\n        </li>\r\n      ) : (\r\n        <li className=\"page-item disabled\">\r\n          <span className=\"page-link\">&raquo;</span>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useContext } from 'react';\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Context } from '../context/main';\r\nimport { useSelector } from 'react-redux';\r\nimport { getServerLogs } from '../utils/logs';\r\nimport Logs from '../components/Logs';\r\n\r\nlet interval\r\n\r\nexport default function LogsContainer() {\r\n  const context = useContext(Context);\r\n  const [logs, setLogs] = useState(null)\r\n  const guild = useSelector(state=> state.guildsReducer);\r\n\r\n  const getLogs = async () => {\r\n    const logsRes = await getServerLogs(context.authToken, guild.CUR_GUILD.id)\r\n    setLogs(logsRes)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(!!guild.CUR_GUILD.id)\r\n      getLogs()\r\n  }, [guild.CUR_GUILD.id])\r\n\r\n  clearInterval(interval)\r\n  interval = setInterval(() => {\r\n    if(!!guild.CUR_GUILD.id)\r\n      getLogs()\r\n  }, 10000)\r\n  \r\n\r\n\r\n  return (\r\n  <Logs\r\n    items={logs}\r\n    onPage={20}\r\n  />)\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Pagination from '../Pagination'\r\nimport Spinner from '../Spinner'\r\nimport './style.scss'\r\n\r\nexport default function Logs(props) {\r\n  const [page, setPage] = useState(1)\r\n  const [pages, setPages] = useState(0)\r\n  const [items, setItems] = useState(null)\r\n\r\n  const onPage = props.onPage || 0\r\n\r\n  useEffect(() => {\r\n    if (props.items === null) return setItems(null)\r\n\r\n    if (onPage > 0 && !!props.items) {\r\n      let startIndex = onPage * (page - 1)\r\n      if (page === 1) startIndex = 0\r\n      setPages(Math.ceil(props.items.length / onPage))\r\n      setItems(props.items.slice(startIndex, startIndex + onPage))\r\n    }\r\n  }, [props.items, page])\r\n\r\n  const pageClick = (num) => {\r\n    if (num > pages) num = pages\r\n    setPage(num)\r\n  }\r\n\r\n  return items === null ? (\r\n    <Spinner card={true} />\r\n  ) : (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <ul className=\"list-group logs-list\">\r\n          {!items.length ? (\r\n            <li className=\"list-group-item text-center\">Логи не найдены</li>\r\n          ) : (\r\n            items.map((item) => {\r\n              const createdAt = new Date(item.createdAt)\r\n              return (\r\n                <li\r\n                  className={'list-group-item ' + item.actionType}\r\n                  key={item.id}\r\n                >\r\n                  <div className=\"left\">\r\n                    <span className=\"date-log\">\r\n                      {createdAt.toLocaleDateString()}{' '}\r\n                      {createdAt.toLocaleTimeString()}\r\n                    </span>\r\n                    <NavLink to={'/users/' + item.userId}>\r\n                      {!!item.username\r\n                        ? item.username\r\n                        : `Пользователь ${item.userId}`}\r\n                    </NavLink>\r\n                  </div>\r\n                  <span>{item.action}</span>\r\n                </li>\r\n              )\r\n            })\r\n          )}\r\n        </ul>\r\n        {pages > 1 && (\r\n          <Pagination pages={pages} curPage={page} onPageClick={pageClick} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport LogsContainer from '../../../container/LogsContainer'\r\n\r\nexport default function LogsPage() {\r\n  return <LogsContainer/>\r\n}\r\n","import React from 'react'\r\nimport Spinner from '../Spinner'\r\nimport './style.scss'\r\n\r\nexport default function UserData({\r\n  user = {},\r\n  userData = {},\r\n  earnCreditsButtonClick,\r\n}) {\r\n  return (\r\n    <div className=\"list-group user-data\">\r\n      {!!user.id ? (\r\n        <div className=\"list-group-item header\">\r\n          {!!user.avatar && (\r\n            <div className=\"image-wrapper\">\r\n              <img src={user.avatar} alt={user.username} />\r\n            </div>\r\n          )}\r\n          <div class=\"username\">\r\n            {user.username}#{user.discriminator}\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button\r\n              onClick={earnCreditsButtonClick}\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Получить кредиты\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"list-group-item header\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"list-group-item\">\r\n        <div className=\"data-items-list\">\r\n          <div className=\"item\">\r\n            <div className=\"item-inner\">\r\n              <div className=\"name\">Кредиты</div>\r\n              {userData === null ? (\r\n                <Spinner />\r\n              ) : (\r\n                <div className=\"value\">{userData.money || 0}</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { app } from '../_config'\r\n\r\nconst header = new Headers()\r\nheader.append('Content-Type', 'application/json')\r\n\r\nexport const getUserDataFromServer = async (authToken, userId) => {\r\n  const params = new URLSearchParams()\r\n  params.append('auth_token', authToken)\r\n  params.append('action', 'GET_USER_DATA')\r\n  params.append('user_id', userId)\r\n\r\n  const res = await fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n    method: 'GET',\r\n    headers: header,\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      return res.data\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n      return {}\r\n    })\r\n  return res\r\n}\r\n\r\nexport const earnCreditsFromServer = async (authToken, userId) => {\r\n  const params = new URLSearchParams()\r\n  params.append('auth_token', authToken)\r\n  params.append('action', 'EARN_CREDITS')\r\n  params.append('user_id', userId)\r\n\r\n  const res = await fetch(app.BOT_API_URL + '?' + params.toString(), {\r\n    method: 'GET',\r\n    headers: header,\r\n  })\r\n    .then((res) => res.json())\r\n    .then((res) => {\r\n      return res\r\n    })\r\n    .catch((e) => {\r\n      console.log(e)\r\n      return { error: true, text: 'Неизвестная ошибка' }\r\n    })\r\n  return res\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport UserData from '.'\r\nimport { earnCreditsFromServer, getUserDataFromServer } from '../../utils/data'\r\nimport { Context } from '../../context/main'\r\nimport { actionAddAlert } from '../../store/alerts'\r\n\r\nexport default function UserDataContainer() {\r\n  const context = useContext(Context)\r\n  const user = useSelector((state) => state.userReducer)\r\n  const dispatch = useDispatch()\r\n\r\n  const [userData, setUserData] = useState(null)\r\n\r\n  const getUserData = async () => {\r\n    const resData = await getUserDataFromServer(context.authToken, user.id)\r\n    setUserData(resData)\r\n  }\r\n\r\n  const earnCredits = async () => {\r\n    const resData = await earnCreditsFromServer(context.authToken, user.id)\r\n    if (!!resData.success) {\r\n      getUserData()\r\n      dispatch(\r\n        actionAddAlert({\r\n          type: 'success',\r\n          text: resData.text,\r\n          id: new Date().getTime(),\r\n        }),\r\n      )\r\n    } else {\r\n      dispatch(\r\n        actionAddAlert({\r\n          type: 'danger',\r\n          text: resData.text,\r\n          id: new Date().getTime(),\r\n        }),\r\n      )\r\n    }\r\n  }\r\n\r\n  const earnCreditsButtonClick = async () => {\r\n    earnCredits()\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!!user.id) getUserData()\r\n  }, [user])\r\n\r\n  // console.log(user)\r\n  // console.log(userData)\r\n\r\n  return (\r\n    <UserData\r\n      user={user}\r\n      userData={userData}\r\n      earnCreditsButtonClick={earnCreditsButtonClick}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport UserDataContainer from '../../UserData/container'\r\n\r\nexport default function UserDataPage() {\r\n  return <UserDataContainer />\r\n}\r\n","import { Route, Switch, Redirect } from 'react-router-dom'\r\nimport Settings from '../components/Settings'\r\nimport Home from '../components/Home'\r\nimport UsersPage from '../components/pages/Users'\r\nimport StatsPage from '../components/pages/Stats'\r\nimport LogsPage from '../components/pages/Logs'\r\nimport UserDataPage from '../components/pages/UserData'\r\n\r\nexport const HomePage = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/settings\" component={Settings} />\r\n      <Route path=\"/users\" component={UsersPage} />\r\n      <Route path=\"/stats\" component={StatsPage} />\r\n      <Route path=\"/logs\" component={LogsPage} />\r\n      <Route path=\"/userdata\" component={UserDataPage} />\r\n      <Route path=\"/\" component={Home} />\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  )\r\n}\r\n","import Cookies from 'universal-cookie';\r\nimport { app } from '../../_config';\r\nimport { actionAddAlert } from '../alerts';\r\nconst cookies = new Cookies();\r\n\r\n\r\n\r\nconst initState = {\r\n  AUTH: false,\r\n  AUTH_TOKEN: false,\r\n  IS_LOADING: true,\r\n  AUTH_ERROR: false\r\n};\r\n\r\n\r\nconst actionType = {\r\n  CHECK_AUTH: 'CHECK_AUTH',\r\n  AUTH_USER: 'AUTH_USER',\r\n  LOGOUT_USER: 'LOGOUT_USER'\r\n}\r\n\r\n\r\nexport const actionCheckAuth = () => {\r\n  return {\r\n    type: actionType.CHECK_AUTH\r\n  }\r\n}\r\n\r\nexport const actionCheckAuthCode = () => (dispatch) => {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const code = urlParams.get('code');\r\n  if(code){\r\n    const params = new URLSearchParams();\r\n    params.append('action', 'CHECK_AUTH_CODE');\r\n    params.append('code', code);\r\n    params.append('redirect_uri', app.REDIRECT_URI);\r\n\r\n    const header = new Headers();\r\n    header.append('Content-Type', 'application/json');\r\n\r\n    fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n      method: 'GET',\r\n      headers: header\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      if(!!res.error){\r\n        dispatch(actionAddAlert({\r\n          type: 'danger',\r\n          text: `Ошибка проверки кода авторизации: ${res.text}`,\r\n          id: new Date().getTime()\r\n        }))\r\n      }else{\r\n        let date = new Date();\r\n        if(res.access_token){\r\n          cookies.set(app.COOKIE_ACCESS, res.access_token, { path: '/', maxAge: date.setDate(date.getDate() + 7) });\r\n          cookies.set(app.COOKIE_REFRESH, res.refresh_token, { path: '/', maxAge: date.setDate(date.getDate() + 7) });\r\n          dispatch(actionSetAuth(res));\r\n        }\r\n        dispatch(actionSetAuth(res));\r\n        window.location.href = app.REDIRECT_URI;\r\n      }\r\n    })\r\n    .catch(e => {\r\n      console.log(e);\r\n    })\r\n\r\n  }\r\n}\r\n\r\nconst actionSetAuth = (payload) => {\r\n  return {\r\n    type: actionType.AUTH_USER,\r\n    payload\r\n  }\r\n}\r\n\r\nexport const actionLogoutUser = () => async (dispatch) => {\r\n  await cookies.remove(app.COOKIE_ACCESS, {path: '/'});\r\n  await cookies.remove(app.COOKIE_REFRESH, {path: '/'});\r\n  window.location.reload();\r\n  // return {\r\n  //   type: actionType.LOGOUT_USER\r\n  // }\r\n}\r\n\r\n\r\nconst authReducer = (state = initState, action) => {\r\n  let newState;\r\n  switch(action.type){\r\n    case actionType.CHECK_AUTH:\r\n      const tokenCookie = cookies.get(app.COOKIE_ACCESS) ? cookies.get(app.COOKIE_ACCESS) : false;\r\n      if(tokenCookie){\r\n        newState = {...state, AUTH: true, AUTH_TOKEN: tokenCookie};\r\n      }\r\n      return {...newState, IS_LOADING: false};\r\n    case actionType.AUTH_USER:\r\n      if(action.payload.access_token){\r\n        newState = {...state, AUTH: true, AUTH_TOKEN: action.payload.access_token};\r\n      }else if(action.payload.error){\r\n        if(action.payload.error_description)\r\n          newState = {...state, AUTH_ERROR: action.payload.error_description};\r\n      }\r\n      return {...newState, IS_LOADING: false};\r\n    case actionType.LOGOUT_USER:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default authReducer;","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function Alerts(alerts = []) {\r\n  return (\r\n    alerts.items.length ? (\r\n      <div className=\"alerts\">\r\n        {alerts.items.map((alert) => <div key={alert.id} className={`alert alert-${alert.type}`} role=\"alert\">{alert.text}</div>)}\r\n      </div>\r\n    ) : null\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Alerts from '.'\r\n\r\nimport { actionRemoveAlert } from '../../store/alerts'\r\n\r\nexport default function AlertsContainer() {\r\n  const dispatch = useDispatch()\r\n  const alerts = useSelector((state) => state.alertsReducer)\r\n  useEffect(() => {\r\n    const lastAlert = alerts[alerts.length - 1]\r\n    if (lastAlert) {\r\n      setTimeout(function () {\r\n        dispatch(actionRemoveAlert(lastAlert.id))\r\n      }, 3000)\r\n    }\r\n  }, [alerts])\r\n\r\n  return <Alerts items={alerts} />\r\n}\r\n","export default __webpack_public_path__ + \"static/media/burger.5ea80f85.svg\";","export default __webpack_public_path__ + \"static/media/close.4a57c160.svg\";","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Context } from '../../context/main'\r\nimport { useContext } from 'react'\r\nimport './style.scss'\r\nimport burgerImage from '../../static/images/burger.svg'\r\nimport closeImage from '../../static/images/close.svg'\r\n\r\nexport default function Sidebar({\r\n  guilds = [],\r\n  guildListClick = (e) => void 0,\r\n  openMenuClick = (e) => void 0,\r\n  closeMenuClick = (e) => void 0,\r\n  menuOpened = false,\r\n}) {\r\n  const context = useContext(Context)\r\n  const links = context.links\r\n\r\n  const cutGuildName = (name) => {\r\n    let nameArr = name.split(' ')\r\n    let newName = ''\r\n    nameArr = nameArr.map((namePart) => {\r\n      namePart = namePart[0].toUpperCase()\r\n      return namePart\r\n    })\r\n\r\n    nameArr = nameArr.slice(0, 3)\r\n\r\n    return nameArr.join('')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button class=\"open-menu\" onClick={openMenuClick}>\r\n        <img src={burgerImage} alt=\"Открыть меню\" />\r\n      </button>\r\n      <div class={menuOpened ? 'sidebar-wrapper opened' : 'sidebar-wrapper'}>\r\n        <button class=\"close-menu\" onClick={closeMenuClick}>\r\n          <img src={closeImage} alt=\"Закрыть меню\" />\r\n        </button>\r\n        {guilds.GUILDS &&\r\n          (guilds.GUILDS.length ? (\r\n            <div className=\"guilds-list-wrapper\">\r\n              <div className=\"guild-list\">\r\n                {guilds.GUILDS.map((guild) => {\r\n                  return (\r\n                    <div\r\n                      key={guild.id}\r\n                      className={\r\n                        guild.id === guilds.CUR_GUILD.id\r\n                          ? 'guild-item current'\r\n                          : 'guild-item'\r\n                      }\r\n                      onClick={() => guildListClick(guild.id)}\r\n                    >\r\n                      {guild.icon ? (\r\n                        <img\r\n                          className=\"rounded-circle\"\r\n                          src={`https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png`}\r\n                          alt={guild.name}\r\n                        />\r\n                      ) : (\r\n                        <div class=\"no-guild-icon\">\r\n                          {cutGuildName(guild.name)}\r\n                        </div>\r\n                      )}\r\n                      <div class=\"guild-name\">{guild.name}</div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className={'guilds-list'}>Серверов не найдено</div>\r\n          ))}\r\n\r\n        <div className=\"card sidebar-card\">\r\n          <div className=\"card-body\">\r\n            <ul className=\"nav flex-column\">\r\n              {links.map((link) => {\r\n                return (\r\n                  <li className=\"nav-item\" key={link.url}>\r\n                    <NavLink\r\n                      className=\"nav-link\"\r\n                      activeClassName=\"active\"\r\n                      exact\r\n                      to={link.url}\r\n                    >\r\n                      {link.name}\r\n                    </NavLink>\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"mt-3\">\r\n      <iframe title=\"discord\" src=\"https://discord.com/widget?id=844866169315262495&theme=dark\" width=\"100%\" height=\"500\" allowtransparency=\"true\" frameborder=\"0\" sandbox=\"allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts\"></iframe>\r\n    </div> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Context } from '../../context/main'\r\nimport Sidebar from '.'\r\nimport {\r\n  actionChangeCurrentGuild,\r\n  actionGetUserGuilds,\r\n} from '../../store/guilds'\r\nimport { useLocation } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\nexport default function SidebarContainer() {\r\n  const guilds = useSelector((state) => state.guildsReducer)\r\n  const firebase = useSelector((state) => state.firebaseReducer)\r\n  const dispatch = useDispatch()\r\n  const context = useContext(Context)\r\n  const authToken = context.authToken\r\n  const location = useLocation()\r\n  const [menuOpened, setMenuOpened] = useState(false)\r\n\r\n  const loadUserGuilds = (allServers) => {\r\n    dispatch(actionGetUserGuilds(authToken, allServers))\r\n  }\r\n\r\n  const guildListClick = (id) => {\r\n    dispatch(actionChangeCurrentGuild(id))\r\n  }\r\n\r\n  const openMenuClick = () => setMenuOpened(true)\r\n  const closeMenuClick = () => setMenuOpened(false)\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(firebase.ALL_SERVERS).length)\r\n      loadUserGuilds(firebase.ALL_SERVERS)\r\n  }, [firebase.ALL_SERVERS])\r\n\r\n  useEffect(() => {\r\n    setMenuOpened(false)\r\n  }, [location])\r\n\r\n  useEffect(() => {\r\n    setMenuOpened(false)\r\n  }, [guilds.CUR_GUILD])\r\n\r\n  return (\r\n    <Sidebar\r\n      guilds={guilds}\r\n      guildListClick={guildListClick}\r\n      openMenuClick={openMenuClick}\r\n      closeMenuClick={closeMenuClick}\r\n      menuOpened={menuOpened}\r\n    />\r\n  )\r\n}\r\n","import { app } from '../../_config';\r\nimport { actionAddAlert } from '../alerts';\r\nimport { actionLogoutUser } from '../auth';\r\n\r\nconst initState = {};\r\n\r\nconst actionType = {\r\n  SET_USER: 'SET_USER'\r\n}\r\n\r\nexport const actionGetUser = (authToken) => (dispatch) => {\r\n  const params = new URLSearchParams();\r\n  params.append('auth_token', authToken);\r\n  params.append('action', 'GET_USER');\r\n  const header = new Headers();\r\n  header.append('Content-Type', 'application/json');\r\n\r\n \r\n  fetch(app.BOT_API_URL + \"?\" + params.toString(), {\r\n    method: 'GET',\r\n    headers: header\r\n  })\r\n  .then(res => res.json())\r\n  .then(res => {\r\n    if(!!res.error){\r\n      dispatch(actionAddAlert({\r\n        type: 'danger',\r\n        text: `Ошибка получения пользователя: ${res.text}`,\r\n        id: new Date().getTime()\r\n      }))\r\n      if(res.status === 401)\r\n        dispatch(actionLogoutUser())\r\n    }else{\r\n      dispatch(actionSetUser(res));\r\n    }\r\n  })\r\n  .catch(e => {\r\n    console.log(e);\r\n  })\r\n\r\n}\r\n\r\nconst actionSetUser = (payload) => {\r\n  return {\r\n    type: actionType.SET_USER,\r\n    payload\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst userReducer = (state = initState, action) => {\r\n  switch(action.type){\r\n    case actionType.SET_USER:\r\n      return {...state, ...action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default userReducer;","import React from 'react'\r\nimport Button from '../Button'\r\nimport Spinner from '../Spinner'\r\nimport PropTypes from 'prop-types'\r\nimport './style.scss'\r\n\r\nexport default function Header({ user = {}, logout = (e) => void 0 }) {\r\n  return (\r\n    <header>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"col-md-6\">\r\n            <nav className=\"navbar navbar-dark pl-0 py-1\">\r\n              <div className=\"navbar-brand\">\r\n                {Object.keys(user).length ? (\r\n                  <div className=\"d-flex align-items-center\">\r\n                    {user.avatar && (\r\n                      <img\r\n                        src={user.avatar}\r\n                        className=\"d-inline-block align-top rounded-circle mr-3\"\r\n                        alt=\"\"\r\n                      />\r\n                    )}\r\n                    <span className=\"text-white\">\r\n                      {user.username}#{user.discriminator}\r\n                    </span>\r\n                  </div>\r\n                ) : (\r\n                  <Spinner />\r\n                )}\r\n              </div>\r\n            </nav>\r\n          </div>\r\n          <div className=\"col-md-6 text-right\">\r\n            <Button text=\"Выход\" classes=\"btn-danger\" onClick={logout} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  user: PropTypes.object,\r\n  guilds: PropTypes.object,\r\n  logout: PropTypes.func,\r\n  guildsOpened: PropTypes.bool,\r\n  curGuildClick: PropTypes.func,\r\n  guildListClick: PropTypes.func,\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { Context } from '../../context/main'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { actionGetUser } from '../../store/user'\r\n\r\nimport Header from '.'\r\nimport { actionGetAllServersWhereBotIs } from '../../store/firebase'\r\nimport { actionLogoutUser } from '../../store/auth'\r\n\r\nexport default function HeaderContainer() {\r\n  const context = useContext(Context)\r\n  const authToken = context.authToken\r\n  const user = useSelector((state) => state.userReducer)\r\n  const dispatch = useDispatch()\r\n\r\n  const loadUser = () => {\r\n    dispatch(actionGetUser(authToken))\r\n  }\r\n\r\n  const getAllServersWhereBotIs = () => {\r\n    dispatch(actionGetAllServersWhereBotIs(context.authToken))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadUser()\r\n    getAllServersWhereBotIs()\r\n  }, [])\r\n\r\n  const logout = () => {\r\n    dispatch(actionLogoutUser())\r\n  }\r\n  return <Header user={user} logout={logout} />\r\n}\r\n","import './scss/App.scss'\nimport Spinner from './components/Spinner'\nimport Auth from './components/Auth'\nimport Footer from './components/Footer'\nimport { HomePage } from './pages'\nimport { Context } from './context/main'\nimport { links } from './_config'\nimport { useEffect } from 'react'\n\nimport { app } from './_config'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actionCheckAuth, actionCheckAuthCode } from './store/auth'\n\nimport AlertsContainer from './components/Alerts/container'\nimport SidebarContainer from './components/Sidebar/container'\nimport HeaderContainer from './components/Header/container'\n\nfunction App() {\n  const authState = useSelector((state) => state.authReducer)\n  const dispatch = useDispatch()\n\n  const setAuthState = () => {\n    dispatch(actionCheckAuth())\n    dispatch(actionCheckAuthCode())\n  }\n\n  useEffect(() => {\n    setAuthState()\n  }, [])\n\n  const htmlRender = () => {\n    if (authState.IS_LOADING)\n      return (\n        <div className=\"main-spinner\">\n          <Spinner />\n        </div>\n      )\n\n    if (authState.AUTH) {\n      return (\n        <Context.Provider\n          value={{\n            links,\n            authToken: authState.AUTH_TOKEN,\n            app,\n          }}\n        >\n          <div className=\"main-wrapper\">\n            <HeaderContainer />\n            <div className=\"container-fluid main-container\">\n              <div className=\"row h-100\">\n                <div className=\"col-md-3\">\n                  <SidebarContainer />\n                </div>\n                <div className=\"col-md-9\">\n                  <div className=\"content-page\">\n                    <HomePage />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <Footer />\n          </div>\n          <AlertsContainer />\n        </Context.Provider>\n      )\n    } else {\n      return (\n        <Context.Provider\n          value={{\n            links,\n            app,\n          }}\n        >\n          <Auth />\n          <AlertsContainer />\n        </Context.Provider>\n      )\n    }\n  }\n\n  return htmlRender()\n}\n\nexport default App\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from './auth';\r\nimport userReducer from './user';\r\nimport guildsReducer from './guilds';\r\nimport firebaseReducer from './firebase';\r\nimport alertsReducer from \"./alerts\";\r\nconst middleware = [];\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer,\r\n    userReducer,\r\n    guildsReducer,\r\n    firebaseReducer,\r\n    alertsReducer\r\n})\r\n\r\nexport const configureStore = () => {\r\n  const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk, ...middleware)));\r\n  return store;\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { configureStore } from './store'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter basename=\"/\">\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}